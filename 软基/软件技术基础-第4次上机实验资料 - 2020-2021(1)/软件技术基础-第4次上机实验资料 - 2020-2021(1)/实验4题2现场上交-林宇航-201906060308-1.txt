
/*
// 第四次实验参考代码
*/

#include <stdio.h>
#include <stdlib.h>

/*-----------------------------------------------------------------------------------------------*/
// 题目：单链表处理
/*-----------------------------------------------------------------------------------------------*/

//单链表结构体
typedef struct node
{
    int  data;
    struct  node* next;
} NODE, * LinkList;


/*
// 尾部插入结点建立含头结点的单链表函数
*/
NODE* create_nodes_list()
{
    NODE* H = NULL;
    NODE* s, * r = NULL;
    int ret, data;
    char exit_flag;

    H = (NODE*)malloc(sizeof(NODE));
    if (H == NULL)
    {
        return NULL;
    }

    /*初始化头结点参数*/
    H->data = 0;
    H->next = NULL;

    r = H;

    printf("请输入单链表的数据域,直接输入q加回车结束创建\n");
    while (1)
    {
        ret = scanf_s("%d", &data);
        scanf_s("%c", &exit_flag);

        if (ret == 1)
        {
            s = (NODE*)malloc(sizeof(NODE));
            if (s == NULL)
            {
                break;
            }
            s->data = data;
            s->next = NULL; /*新创建结点加在队尾，初始化指针域为空*/

            r->next = s;

            /*r指向队尾的结点*/
            r = s;
        }
        else if (exit_flag == 'q')
        {
            printf("创建一元多项式链表结束\n");
            break;
        }
        else
        {
            printf("输入参数错误，请按要求输入数值，结束创建请直接输入q加回车\n");
        }

        fflush(stdin);
    }

    return H;
}


/*
// 遍历打印带头结点的链表中所有数据域
*/
void print_nodes_list(NODE* H)
{
    NODE* p;

    if (H == NULL)
    {
        return;
    }

    p = H->next;

    printf("单链表的数据域值如下：\n");

    while (p != NULL)
    {
        printf("%d \n", p->data);
        p = p->next;
    }

    printf("\n");
}



/*
// 销毁带头结点的链表函数
*/
void destroy_nodes_list(NODE* H)
{
    NODE* t, * p;

    if (H == NULL)
    {
        return;
    }

    p = H;

    while (p != NULL)
    {
        t = p;
        p = p->next;
        free(t);
    }
}



//单链表处理函数：L为带头结点的链表指针,x为题目中输入的参数，count为输出的统计个数
void  process(LinkList L, int x, int& count)
{
    //TODO: 5分，先将单链表中比整数x小的数据都按递减次序排列；再将序列中比整数x大的数据个数记录在count中，要求相等的整数只计算一次，并将比整数x大的偶数从单链表中删除。

    if (L->next == NULL || x< L->next->data)
    {
        count = 0;
        return;
    }
    LinkList NL = (NODE*)malloc(sizeof(NODE));
    if (NL == NULL) return ;
    NL->next = L->next;
    L->next = NULL;
    LinkList p = NL->next;
    LinkList temp1=NULL,temp2 = NULL,line=NULL;
    line = p;
	for (; p != NULL && p->data < x; p = temp2)
	{
		temp1 = L->next;
		L->next = p;
		temp2 = p->next;
		p->next = temp1;
	}
    if (temp2 != NULL)
    {
        line->next = temp2;
    }


    int perdata = 0;
    count = 0;
	for (; p != NULL; )
	{
        if (p->data == perdata)
        {
            temp1->next = p->next;
            p = p->next;
        }
        else
        {
            perdata = p->data;
            count++;
            p = p->next; 
            temp1 = p;
        }


	}


}


void main()
{
    LinkList Ha;
    int count;
    int x = 5; /*测试值，也可以手动输入*/

    /*手动输入创建递减有序单链表*/
    Ha = create_nodes_list();

    /*打印单链表Ha*/
    printf("\n打印处理前的单链表：\n");
    print_nodes_list(Ha);

    /*测试单链表合并算法*/
    process(Ha, x, count);

    /*打印处理后的单链表Ha*/
    printf("\n打印处理后的单链表：\n");
    print_nodes_list(Ha);

    printf("\n count = %d \n", count);

    /*销毁单链表*/
    destroy_nodes_list(Ha);
}
