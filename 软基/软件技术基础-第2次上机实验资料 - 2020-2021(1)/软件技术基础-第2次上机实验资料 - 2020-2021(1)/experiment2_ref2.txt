
/*
// 第二次实验参考代码
*/

#include <stdio.h>
#include <stdlib.h>



/*-----------------------------------------------------------------------------------------------*/
// 题目：二叉排序树降序打印
/*-----------------------------------------------------------------------------------------------*/

/*
// 完成二叉树的基本函数定义
*/

//数据元素类型
typedef struct {
    int key;    /*关键字*/
} ElemType;


//二叉排序树链表结点结构体
typedef struct node {
    ElemType elem;    /*数据元素类型*/
    struct node* lc, * rc;	   /*左右指针*/
}BstNode;




// 将s所指的新结点插入到t所指的二叉排序树中，允许输入关键字相等的结点
BstNode* insert_bst(BstNode* t, BstNode* s)
{
    BstNode* f=NULL, * p;
    if (t == NULL) return s;    /*原树为空，直接返回s作为根指针*/

    p = t;
    while (p != NULL)
    {
        f = p;    /*查找过程中，f指向*p的双亲*/
        if (s->elem.key < p->elem.key)    p = p->lc;    /*在左子树中查找插入位置*/
        else p = p->rc;    /*大于等于的都在右子树中查找插入位置*/
    }

    if (s->elem.key < f->elem.key)  f->lc = s;   /*将*s插入为*f的左孩子*/
    else f->rc = s;    /*将*s插入为*f的右孩子*/
    return t;
}


// 创建一棵二叉排序树，输入数字0结束创建
BstNode* creat_bst()
{
    BstNode* s, * t;
    int key, endflag = 0;
    int data;
    t = NULL;    /*设置二叉排序树的初态为空树*/
    scanf_s("%d", &key);    /*读入一个结点的关键字*/
    while (key != endflag)   /*输入未到结束标志时，循环*/
    {
        s = (BstNode*)malloc(sizeof(BstNode));    /*申请新结点*/
        s->lc = s->rc = NULL;    /*赋初值*/
        s->elem.key = key;
        t = insert_bst(t, s);    /*将新结点*s插入到t中*/
        scanf_s("%d", &key);    /*读入下一个结点的关键字*/
    }

    return t;
}


// 销毁二叉排序树
void  destroy_bst(BstNode* t)
{
    // TODO（0.5分）: 待完善
    if (t == NULL)
    {
        return;
    }
    destroy_bst(t->lc);
    destroy_bst(t->rc);
    delete t;
}


// 正常中序遍历打印结点关键字
void inorder_bst_common(BstNode* t)
{
    // TODO（0.5分）: 待完善
    if (t == NULL)
    {
        return;
    }
    inorder_bst_common(t->lc);
    printf("%d  ", t->elem.key);
    inorder_bst_common(t->rc);

}


// 降序打印前N个结点的关键字key，打印过程中滤除重复数据，并将总关键字个数保存到count中；整个过程不得破坏排序二叉树结构
void print_bst_desc(BstNode* t, int N, int& count)
{
    // TODO（3分）: 待完善
    static int n=0,perdata=0;
    if (t == NULL)
    {
        return;
    }

    print_bst_desc(t->rc, N, count);

    if (n == N)
    {
        return;
    }
    if (perdata == t->elem.key)
    {
        n++;
        return;
    }
    printf("%d  ", t->elem.key);
    count++;
    n++;
    perdata = t->elem.key;

    print_bst_desc(t->lc, N, count);


}


// 二叉排序树测试函数
void test_print_bst()
{
    BstNode* T;
    int N, count = 0;

    printf("请输入数值创建二叉排序树，输入0代表结束创建\n");

    // 生成排序二叉树
    T = creat_bst();

    // 正常中序遍历二叉树
    printf("\n正常中序遍历关键字打印结果：\n");
    inorder_bst_common(T);

    printf("\n请输入N值\n");
    scanf_s("%d", &N);    /*读入下一个结点的关键字*/

    // 中序唯一遍历二叉树
    printf("\n前N个结点的关键字不重复打印结果：\n");
    print_bst_desc(T, N, count);
    printf("\n二叉排序树中共%d个结点\n", count);

    // 销毁二叉排序树
    destroy_bst(T);

    printf("\n销毁二叉树\n");

    return;
}


void main()
{
    /*二叉排序树打印测试*/
    test_print_bst();
}